security:
  caCerts:
    rootCA.pem: |
      -----BEGIN CERTIFICATE-----
      MIIEvTCCAyWgAwIBAgIQSoeMGLt9f2uTsT6XdielCDANBgkqhkiG9w0BAQsFADB3
      MR4wHAYDVQQKExVta2NlcnQgZGV2ZWxvcG1lbnQgQ0ExJjAkBgNVBAsMHXU1Mjcz
      NUBONTYyNjFYLmVuZXJneWNvcnAuY29tMS0wKwYDVQQDDCRta2NlcnQgdTUyNzM1
      QE41NjI2MVguZW5lcmd5Y29ycC5jb20wHhcNMjUwNDIzMDUyNTIyWhcNMzUwNDIz
      MDUyNTIyWjB3MR4wHAYDVQQKExVta2NlcnQgZGV2ZWxvcG1lbnQgQ0ExJjAkBgNV
      BAsMHXU1MjczNUBONTYyNjFYLmVuZXJneWNvcnAuY29tMS0wKwYDVQQDDCRta2Nl
      cnQgdTUyNzM1QE41NjI2MVguZW5lcmd5Y29ycC5jb20wggGiMA0GCSqGSIb3DQEB
      AQUAA4IBjwAwggGKAoIBgQDT/MrFGD2m7j9KI3fX5NjTa4K2n0U5AOUQ4E8r7npR
      sjFEGz7nsKjoyHQN3G/4woMeap61KzIwQdTLCDpBTZ4SPRWyxFSJgjKltMJ1bCUZ
      qusWrHJyC+4c1M4AE5otjo1Hg1FWYpTxn/3xIK8XfzE5tBDlLPpdl4e00VJlQXjH
      TUdM6MFuzpmzCVvficQjepHBFpjvWvqAjFsS6liWZUTuJk+QtCAEf6RT7weMcFuL
      FT/0QZKCultV6ZSHaIKiPJjM3iXm4Phh2Egs2/iBhpm0IBZyt9YYRd7Wl6l6beGz
      hQDxR44FnVgZe3Os2tGHdZ5lQcs33Ti+rvTO+wvlUm6NoSS0//5Rp7LdfmciMsEv
      9ds1iKuPv+UrevG6SZdCe60Mj42+EdvADsBtx2Dhn6hsSgObMMXjXsQoE2koZhY5
      I/vrpzDWnZ5VYNYS85qr5JQHc/i9ahuCNOw0KBSXjjTgrFc9PIROKAtaeW2upCFA
      axZrugd3PCxxRqO/W8jOR7ECAwEAAaNFMEMwDgYDVR0PAQH/BAQDAgIEMBIGA1Ud
      EwEB/wQIMAYBAf8CAQAwHQYDVR0OBBYEFKZt8eI23IzHQxLdSmvJKL4937vnMA0G
      CSqGSIb3DQEBCwUAA4IBgQByLFR/Z0+SToPTcYgNGJi5H2p1EDG29FXLvK1LZT3j
      DteUJXgg6oc1L5LAdDQ77A8GZZyP69GB9mi9WS0A1n/eZjlNQWIMCPwGkb1rW9GS
      JkuAF7D8eG59z9zC0pRNasX2cNOBb34gVePeS+kuaKA3sP6Me3CHSjmOFPuzjWcv
      fK6hdKSZ7XKoiTTA16Ee7ASO/OJ6tM+se53Xttpqb7jnlbbCpfOnT1dgHE0nOty+
      gyQG0YYsbZlfqKoMMauUwXUn/x37IJQ7SAxCP4Ltp6JKhvXMsbPusBv4W/A+YMcw
      +9OdgJWyyHk1d4HMVbJ9FuyZFT+ymZjV8c14L8A5dFxqGh/uP0q+IrisPAGPO+e1
      vJgrGUjrd5pQI1+CMZMAPzO3Fyaqavly/1zA1n9j3z1pBNY6/LD62IRpFEZp1J5i
      mHnr7DS2yUACXVz3btBK57f0LDKETAsY24WOw6KgwbW4fXtgm+V/hCCcU01qKhWN
      MMNtEwIgq5RSfA4KUQ1DclU=
      -----END CERTIFICATE-----

## API properties
api:
  env:
  - name: SERVICE_BINDING_ROOT
    value: /mnt/platform/bindings
  volumes:
    - name: ca-certs
      secret:
        secretName: terrakube-ca-secrets
        items:
        - key: "rootCA.pem"
          path: "rootCA.pem"
        - key: "type"
          path: "type"
  volumeMounts:
  - name: ca-certs
    mountPath: /mnt/platform/bindings/ca-certificates
    readOnly: true
  properties:
    databaseType: "H2"

executor:
  env:
  - name: SERVICE_BINDING_ROOT
    value: /mnt/platform/bindings
  volumes:
    - name: ca-certs
      secret:
        secretName: terrakube-ca-secrets
        items:
        - key: "rootCA.pem"
          path: "rootCA.pem"
        - key: "type"
          path: "type"
  volumeMounts:
  - name: ca-certs
    mountPath: /mnt/platform/bindings/ca-certificates
    readOnly: true

## Registry properties
registry:
  enabled: true
  replicaCount: "1"
  serviceType: "ClusterIP"
  env:
  - name: SERVICE_BINDING_ROOT
    value: /mnt/platform/bindings
  volumes:
    - name: ca-certs
      secret:
        secretName: terrakube-ca-secrets
        items:
        - key: "rootCA.pem"
          path: "rootCA.pem"
        - key: "type"
          path: "type"
  volumeMounts:
  - name: ca-certs
    mountPath: /mnt/platform/bindings/ca-certificates
    readOnly: true

dex:
  config:
    issuer: https://terrakube-api.minikube.net/dex

    storage:
      type: memory
    web:
      http: 0.0.0.0:5556
      allowedOrigins: ['*']
      skipApprovalScreen: true
    oauth2:
      responseTypes: ["code", "token", "id_token"]

    connectors:
    - type: ldap
      name: OpenLDAP
      id: ldap
      config:
        # The following configurations seem to work with OpenLDAP:
        #
        # 1) Plain LDAP, without TLS:
        host: terrakube-openldap-service:1389
        insecureNoSSL: true
        #
        # 2) LDAPS without certificate validation:
        #host: localhost:636
        #insecureNoSSL: false
        #insecureSkipVerify: true
        #
        # 3) LDAPS with certificate validation:
        #host: YOUR-HOSTNAME:636
        #insecureNoSSL: false
        #insecureSkipVerify: false
        #rootCAData: 'CERT'
        # ...where CERT="$( base64 -w 0 your-cert.crt )"

        # This would normally be a read-only user.
        bindDN: cn=admin,dc=example,dc=org
        bindPW: admin

        usernamePrompt: Email Address

        userSearch:
          baseDN: ou=users,dc=example,dc=org
          filter: "(objectClass=person)"
          username: mail
          # "DN" (case sensitive) is a special attribute name. It indicates that
          # this value should be taken from the entity's DN not an attribute on
          # the entity.
          idAttr: DN
          emailAttr: mail
          nameAttr: cn

        groupSearch:
          baseDN: ou=Groups,dc=example,dc=org
          filter: "(objectClass=groupOfNames)"

          userMatchers:
            # A user is a member of a group when their DN matches
            # the value of a "member" attribute on the group entity.
          - userAttr: DN
            groupAttr: member

          # The group name should be the "cn" value.
          nameAttr: cn

    staticClients:
    - id: example-app
      redirectURIs:
      - 'https://terrakube-ui.minikube.net'
      - '/device/callback'
      - 'http://localhost:10000/login'
      - 'http://localhost:10001/login'
      name: 'example-app'
      public: true


## Ingress properties
ingress:
  useTls: true
  includeTlsHosts: true
  ui:
    enabled: true
    domain: "terrakube-ui.minikube.net"
    path: "/"
    pathType: "Prefix"
    tlsSecretName: tls-secret-ui-terrakube
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
  api:
    enabled: true
    domain: "terrakube-api.minikube.net"
    path: "/"
    pathType: "Prefix"
    tlsSecretName: tls-secret-api-terrakube
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/proxy-set-headers: "terrakube/custom-headers"
  registry:
    enabled: true
    domain: "terrakube-reg.minikube.net"
    path: "/"
    pathType: "Prefix"
    tlsSecretName: tls-secret-reg-terrakube
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/proxy-set-headers: "terrakube/custom-headers"
  dex:
    enabled: true
    path: "/dex/"
    pathType: "Prefix"
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/proxy-set-headers: "terrakube/custom-headers"